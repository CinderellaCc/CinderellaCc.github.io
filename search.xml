<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法汇总</title>
      <link href="/2023/11/30/sorting-algorithm/"/>
      <url>/2023/11/30/sorting-algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">nums</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]:</span><br><span class="line">                nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">arr1, arr2</span>):</span><br><span class="line">    temp = []</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    n1, n2 = <span class="built_in">len</span>(arr1), <span class="built_in">len</span>(arr2)</span><br><span class="line">    <span class="keyword">while</span> i &lt; n1 <span class="keyword">or</span> j &lt; n2:</span><br><span class="line">        <span class="keyword">if</span> i &lt; n1 <span class="keyword">and</span> j &lt; n2:</span><br><span class="line">            <span class="keyword">if</span> arr1[i] &lt;= arr2[j]:</span><br><span class="line">                temp.append(arr1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp.append(arr2[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i &lt; n1:</span><br><span class="line">            temp.append(arr1[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp.append(arr2[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mergeSort</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span>: <span class="keyword">return</span> nums</span><br><span class="line">    mid = <span class="built_in">len</span>(nums) // <span class="number">2</span></span><br><span class="line">    leftArray  = mergeSort(nums[:mid])</span><br><span class="line">    rightArray = mergeSort(nums[mid:])</span><br><span class="line">    sortedArray = merge(leftArray, rightArray)</span><br><span class="line">    <span class="keyword">return</span> sortedArray</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertSort</span>(<span class="params">nums</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j-<span class="number">1</span>] &gt;= nums[j]:</span><br><span class="line">                nums[j-<span class="number">1</span>], nums[j] = nums[j], nums[j-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucketSort</span>(<span class="params">nums</span>):</span><br><span class="line">    maxNum = <span class="built_in">max</span>(nums)</span><br><span class="line">    maxNumSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> maxNum:</span><br><span class="line">        maxNumSize += <span class="number">1</span></span><br><span class="line">        maxNum //= <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    k, cnt = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cnt &lt; maxNumSize:</span><br><span class="line">        bucket = &#123;num: [] <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            bucket[num // k % <span class="number">10</span>].append(num)</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> _, lst <span class="keyword">in</span> bucket.items():</span><br><span class="line">            temp.extend(lst)</span><br><span class="line">        nums = temp</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        k *= <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findIndex</span>(<span class="params">nums</span>):</span><br><span class="line">    temp = nums[<span class="number">0</span>]</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] &gt;= temp:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        nums[i] = nums[j]</span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] &lt; temp:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        nums[j] = nums[i]</span><br><span class="line">    nums[i] = temp</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quickSort</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums  </span><br><span class="line">    index = findIndex(nums)</span><br><span class="line">    quickSort(nums[:index])</span><br><span class="line">    quickSort(nums[index+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"><span class="built_in">print</span>(quickSort(nums))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 61. Rotated List</title>
      <link href="/2023/10/27/rotated-list/"/>
      <url>/2023/10/27/rotated-list/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/rotate-list/description/">Leetcode 61. Rotate List</a></p><p>本题采用<strong>快慢指针</strong>的思路，让<code>fast</code>指针比<code>slow</code>指针多走<code>k</code>步，当<code>fast</code>走到链表最后一个结点时，断开<code>slow</code>指针所在位置，使其指向<code>None</code>；并将<code>fast</code>指针指向链表头结点。</p><p>考虑到<code>k</code>值可能大于链表长度，需将<code>k</code>值在链表长度上进行取模运算。</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">self, head, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> head <span class="comment"># base case</span></span><br><span class="line"></span><br><span class="line">        fast, slow, l = head, head, head</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            l = l.<span class="built_in">next</span></span><br><span class="line">        k %= n <span class="comment"># 取模</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">return</span> head <span class="comment"># 若k取模后等于0，那是否旋转链表并无差别，直接返回链表本身</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            slow, fast = slow.<span class="built_in">next</span>, fast.<span class="built_in">next</span></span><br><span class="line">        new_head = slow.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        fast.<span class="built_in">next</span> = head</span><br><span class="line">        <span class="keyword">return</span> new_head</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 33. 搜索旋转排序数组</title>
      <link href="/2023/10/24/search-in-rotated-array/"/>
      <url>/2023/10/24/search-in-rotated-array/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/">Leetcode 33. 搜索旋转排序数组</a></p><p>本题将采用<strong>二分查找</strong>寻找目标值；首先通过对比left、right和mid下标对应的值，可知mid分割的哪一侧是有序的；然后判断target是否属于有序的一侧，若属于，则在有序侧查找，反之，在另一侧查找。</p><p>例如，在数组<code>nums = [5,6,7,1,2,3,4]</code>中查找<code>target = 3</code>。此时，下标<code>left = 0</code>、<code>right = 6</code>、<code>mid = 3</code>；因为<code>nums[right] &gt; nums[mid]</code>，则右侧<code>nums[mid: ]</code>是有序的，又因为<code>nums[mid] &lt; target &lt; nums[right]</code>，所以下一轮要在右侧进行查找。</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right-left) // <span class="number">2</span> <span class="comment"># 不采用 (left + right) // 2 是为了防止精度溢出</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target: <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid]: <span class="comment"># 左边有序[left: mid]</span></span><br><span class="line">                <span class="keyword">if</span> target &gt;= nums[left] <span class="keyword">and</span> target &lt;= nums[mid]: </span><br><span class="line">                    right = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 右边有序[mid+1: right]</span></span><br><span class="line">                <span class="keyword">if</span> target &gt;= nums[mid] <span class="keyword">and</span> target &lt;= nums[right]:</span><br><span class="line">                    left = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="comment"># 若未找到目标值，返回-1</span></span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line"><span class="built_in">print</span>(s.search([<span class="number">1</span>,<span class="number">2</span>], <span class="number">8</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>streamlit入门学习笔记</title>
      <link href="/2023/09/15/streamlit-learning-notes/"/>
      <url>/2023/09/15/streamlit-learning-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install install streamlit</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法一</span></span><br><span class="line">python -m streamlit run your_script.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法二</span></span><br><span class="line">streamlit run your_script.py</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="st-write-的简单使用"><a href="#st-write-的简单使用" class="headerlink" title="st.write()的简单使用"></a><code>st.write()</code>的简单使用</h2><p>使用<code>st.write()</code>在网页上画出任何你想展示的内容，包括：text、data、matplotlib plot、charts等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 代码示例</span><br><span class="line">import streamlit as st</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">st.write(&quot;Here&#x27;s our first attempt at using data to create a table:&quot;)</span><br><span class="line">st.write(pd.DataFrame(&#123;</span><br><span class="line">    &#x27;first column&#x27;: [1, 2, 3, 4],</span><br><span class="line">    &#x27;second column&#x27;: [10, 20, 30, 40]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="使用st-table-和st-dataframe-画表格"><a href="#使用st-table-和st-dataframe-画表格" class="headerlink" title="使用st.table()和st.dataframe()画表格"></a>使用<code>st.table()</code>和<code>st.dataframe()</code>画表格</h2><p>除了用<code>st.write()</code>，也可用<code>st.table()</code>、<code>st.dataframe()</code>等特定函数来制作更加精美的图表。建议用特定函数来实现更复杂的功能，<code>st.write()</code>存在一定局限性，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dataframe = pd.DataFrame(</span><br><span class="line">    np.random.randn(<span class="number">10</span>, <span class="number">20</span>),</span><br><span class="line">    columns=(<span class="string">&#x27;col %d&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line">st.dataframe(dataframe.style.highlight_max(axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dataframe = pd.DataFrame(</span><br><span class="line">    np.random.randn(<span class="number">10</span>, <span class="number">20</span>),</span><br><span class="line">    columns=(<span class="string">&#x27;col %d&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)))</span><br><span class="line">st.table(dataframe)</span><br></pre></td></tr></table></figure><h2 id="使用st-line-chart-画折线图"><a href="#使用st-line-chart-画折线图" class="headerlink" title="使用st.line_chart()画折线图"></a>使用<code>st.line_chart()</code>画折线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">chart_data = pd.DataFrame(</span><br><span class="line">     np.random.randn(<span class="number">20</span>, <span class="number">3</span>),</span><br><span class="line">     columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">st.line_chart(chart_data)</span><br></pre></td></tr></table></figure><h2 id="使用st-map-画地图"><a href="#使用st-map-画地图" class="headerlink" title="使用st.map()画地图"></a>使用<code>st.map()</code>画地图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">map_data = pd.DataFrame(</span><br><span class="line">    np.random.randn(<span class="number">1000</span>, <span class="number">2</span>) / [<span class="number">50</span>, <span class="number">50</span>] + [<span class="number">37.76</span>, -<span class="number">122.4</span>],</span><br><span class="line">    columns=[<span class="string">&#x27;lat&#x27;</span>, <span class="string">&#x27;lon&#x27;</span>])</span><br><span class="line"></span><br><span class="line">st.<span class="built_in">map</span>(map_data)</span><br></pre></td></tr></table></figure><h2 id="使用st-slider-、st-button-和st-selectbox-画小组件"><a href="#使用st-slider-、st-button-和st-selectbox-画小组件" class="headerlink" title="使用st.slider()、st.button()和st.selectbox()画小组件"></a>使用<code>st.slider()</code>、<code>st.button()</code>和<code>st.selectbox()</code>画小组件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;first column&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">&#x27;second column&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">option = st.selectbox(</span><br><span class="line">    <span class="string">&#x27;Which number do you like best?&#x27;</span>,</span><br><span class="line">     df[<span class="string">&#x27;first column&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;You selected: &#x27;</span>, option</span><br></pre></td></tr></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p><code>streamlit</code>可将所有的菜单元素（如滑动条、选择框、输入框等）统一放置到网页一侧，使网页更加美观。运行如下代码看看效果吧~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a selectbox to the sidebar:</span></span><br><span class="line">add_selectbox = st.sidebar.selectbox(</span><br><span class="line">    <span class="string">&#x27;How would you like to be contacted?&#x27;</span>,</span><br><span class="line">    (<span class="string">&#x27;Email&#x27;</span>, <span class="string">&#x27;Home phone&#x27;</span>, <span class="string">&#x27;Mobile phone&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a slider to the sidebar:</span></span><br><span class="line">add_slider = st.sidebar.slider(</span><br><span class="line">    <span class="string">&#x27;Select a range of values&#x27;</span>,</span><br><span class="line">    <span class="number">0.0</span>, <span class="number">100.0</span>, (<span class="number">25.0</span>, <span class="number">75.0</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>当你的程序运行需要一定时间时，你可将进度条打印出来，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;Starting a long computation...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a placeholder</span></span><br><span class="line">latest_iteration = st.empty()</span><br><span class="line">bar = st.progress(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">  <span class="comment"># Update the progress bar with each iteration.</span></span><br><span class="line">  latest_iteration.text(<span class="string">f&#x27;Iteration <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">  bar.progress(i + <span class="number">1</span>)</span><br><span class="line">  time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;...and now we\&#x27;re done!&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h1><p>以下是官网解释：</p><p>Streamlit 缓存使您的应用程序即使在从 Web 加载数据、操作大型数据集或执行昂贵的计算时也能保持高性能。</p><p>缓存背后的基本思想是存储昂贵的函数调用的结果，并在相同的输入再次发生时返回缓存的结果，而不是在后续运行中调用该函数。</p><blockquote><p>我的理解：streamlit app与flask不同，falsk创建的是一个服务，是一个长期运行在后台的程序，程序中一些开销大的计算在服务启动时就计算完毕，后续在不同地方访问服务都无需重新计算，直接获取计算结果，速度非常快（此处不包含一些需要前后端交互导致的计算过程）；而Streamlit app是一个python脚本，每次在浏览器访问页面时都会重新运行该脚本，为此，引入了<code>cache</code>功能避免重复计算。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@st.cache_data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_running_function</span>(<span class="params">param1, param2</span>):</span><br><span class="line">    <span class="keyword">return</span> …</span><br></pre></td></tr></table></figure><h1 id="多个页面"><a href="#多个页面" class="headerlink" title="多个页面"></a>多个页面</h1><p>Streamlit可创建多个页面，在不同页面间的切换也十分方便，具体操作参考<a href="https://docs.streamlit.io/">官方教程</a></p><h1 id="Streamlit的特性"><a href="#Streamlit的特性" class="headerlink" title="Streamlit的特性"></a>Streamlit的特性</h1><p>Streamlit是从上到下运行的Python脚本<br>Streamlit apps are Python scripts that run from top to bottom</p><p>每当用户打开浏览器选项卡指向你的应用时，脚本就会被重新执行<br>Every time a user opens a browser tab pointing to your app, the script is re-executed</p><p>当脚本执行时，Streamlit在浏览器中实时绘制其输出<br>As the script executes, Streamlit draws its output live in a browser</p><p>脚本使用Streamlit缓存来避免重新计算昂贵的函数，因此更新发生得非常快<br>Scripts use the Streamlit cache to avoid recomputing expensive functions, so updates happen very fast</p><p>每次用户与小部件交互时，脚本都会重新执行，并且在运行期间将该小部件的输出值设置为新值。<br>Every time a user interacts with a widget, your script is re-executed and the output value of that widget is set to the new value during that run.</p><p>Streamlit可以包含多个页面，这些页面被定义在pages文件夹中单独的.py文件中。<br>Streamlit apps can contain multiple pages, which are defined in separate .py files in a pages folder.</p><h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><p>本教程是作者在自学过程中简单记录的笔记，仅做参考，详细教程请移步<a href="https://docs.streamlit.io/">官方教程</a></p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>Streamlit官方教程：<a href="https://docs.streamlit.io/">https://docs.streamlit.io/</a><br>Streamlit官方教程API文档：<a href="https://docs.streamlit.io/library/api-reference">https://docs.streamlit.io/library/api-reference</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> streamlit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Optimum的ONNX runtime加速sentence transformer（Pytorch+GPU）</title>
      <link href="/2023/08/04/onnxruntime-tutorial/"/>
      <url>/2023/08/04/onnxruntime-tutorial/</url>
      
        <content type="html"><![CDATA[<p>在本篇教程中，你将会学习到如何使用Optimum来加快Sentence Transformer模型的推理速度。</p><p>本文使用的Sentence Transformer模型是<a href="https://huggingface.co/moka-ai/m3e-base">m3e-base</a>，该模型是当前效果较好的中文句向量计算模型。</p><p><a href="https://huggingface.co/docs/optimum/index">Hugging Face Optimum</a>是Transformers的扩展，提供了一系列性能优化工具，使得模型的训练和推理更加高效。Optimum中集成了ONNX runtime加速工具。</p><p>本教程将按以下步骤展开：</p><ol><li>环境配置</li><li>将Sentence Transformer模型转换成ONNX格式</li><li>自定义模型推理Pipeline</li><li>在ONNX模型上应用图优化技术</li><li>优化模型推理 + 测试优化模型推理的正确性</li><li>性能评估</li></ol><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>运行以下命令，安装Optimum所对应的依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install optimum[onnxruntime-gpu]</span><br></pre></td></tr></table></figure><h1 id="将Sentence-Transformer模型转换成ONNX格式"><a href="#将Sentence-Transformer模型转换成ONNX格式" class="headerlink" title="将Sentence Transformer模型转换成ONNX格式"></a>将Sentence Transformer模型转换成ONNX格式</h1><p>（注意：ONNX是一种模型格式，而ONNX runtime是模型加速方法）<br>将Sentence Transformer模型转换成ONNX格式需要用到<code>ORTModelForFeatureExtraction</code>类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> optimum.onnxruntime <span class="keyword">import</span> ORTModelForFeatureExtraction</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">onnx_model_dir = <span class="string">&#x27;./models/onnx&#x27;</span> <span class="comment"># ONNX模型保存路径</span></span><br><span class="line">model = ORTModelForFeatureExtraction.from_pretrained(<span class="string">&#x27;./models/m3e-base&#x27;</span>, from_transformers=<span class="literal">True</span>)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&#x27;./models/m3e-base&#x27;</span>)</span><br><span class="line">model.save_pretrained(onnx_model_dir)</span><br><span class="line">tokenizer.save_pretrained(onnx_model_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印目录下的文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;在&#123;&#125;目录下生成模型文件：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(onnx_model_dir, os.listdir(onnx_model_dir)))</span><br><span class="line"><span class="comment"># 输出：在./models/onnx目录下生成模型文件：[&#x27;tokenizer_config.json&#x27;, &#x27;vocab.txt&#x27;, &#x27;model.onnx&#x27;, &#x27;config.json&#x27;, &#x27;special_tokens_map.json&#x27;, &#x27;tokenizer.json&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="自定义模型推理Pipeline"><a href="#自定义模型推理Pipeline" class="headerlink" title="自定义模型推理Pipeline"></a>自定义模型推理Pipeline</h1><p>由于现在的模型是onnx格式，我们无法直接使用model.encode()进行推理，所以改写了transformers库的Pipeline类，使其支持onnx格式的模型推理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean_pooling</span>(<span class="params">model_output, attention_mask</span>):</span><br><span class="line">    token_embeddings = model_output[<span class="number">0</span>] <span class="comment">#First element of model_output contains all token embeddings</span></span><br><span class="line">    input_mask_expanded = attention_mask.unsqueeze(-<span class="number">1</span>).expand(token_embeddings.size()).<span class="built_in">float</span>()</span><br><span class="line">    <span class="keyword">return</span> torch.<span class="built_in">sum</span>(token_embeddings * input_mask_expanded, <span class="number">1</span>) / torch.clamp(input_mask_expanded.<span class="built_in">sum</span>(<span class="number">1</span>), <span class="built_in">min</span>=<span class="number">1e-9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SentenceEmbeddingPipeline</span>(<span class="title class_ inherited__">Pipeline</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_sanitize_parameters</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="comment"># we don&#x27;t have any hyperameters to sanitize</span></span><br><span class="line">        preprocess_kwargs = &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> preprocess_kwargs, &#123;&#125;, &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">self, inputs</span>):</span><br><span class="line">        encoded_inputs = self.tokenizer(inputs, padding=<span class="literal">True</span>, truncation=<span class="literal">True</span>, return_tensors=<span class="string">&#x27;pt&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> encoded_inputs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_forward</span>(<span class="params">self, model_inputs</span>):</span><br><span class="line">        outputs = self.model(**model_inputs)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;outputs&quot;</span>: outputs, <span class="string">&quot;attention_mask&quot;</span>: model_inputs[<span class="string">&quot;attention_mask&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postprocess</span>(<span class="params">self, model_outputs</span>):</span><br><span class="line">        <span class="comment"># Perform pooling</span></span><br><span class="line">        sentence_embeddings = mean_pooling(model_outputs[<span class="string">&quot;outputs&quot;</span>], model_outputs[<span class="string">&#x27;attention_mask&#x27;</span>])</span><br><span class="line">        <span class="comment"># # Normalize embeddings</span></span><br><span class="line">        <span class="comment"># sentence_embeddings = F.normalize(sentence_embeddings, p=2, dim=1)</span></span><br><span class="line">        <span class="keyword">return</span> sentence_embeddings</span><br></pre></td></tr></table></figure><p>现在使用<code>SentenceEmbeddingPipeline</code>加载ONNX模型，进行推理测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vanilla_emb = SentenceEmbeddingPipeline(model=model, tokenizer=tokenizer)</span><br><span class="line">pred = vanilla_emb(<span class="string">&quot;今天是周五啦，明天就是周末啦，开心，开心，开心&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pred[<span class="number">0</span>][:<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 输出：tensor([ 0.3507,  0.3588,  1.1540, -0.4012, -0.4290])</span></span><br></pre></td></tr></table></figure><h1 id="在ONNX模型上应用图优化技术"><a href="#在ONNX模型上应用图优化技术" class="headerlink" title="在ONNX模型上应用图优化技术"></a>在ONNX模型上应用图优化技术</h1><p>使用<code>ORTOptimizer</code>类和<code>OptimizationConfig</code>类进行优化配置，运行下述代码，生成优化后的ONNX模型<code>model_optimized.onnx</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> optimum.onnxruntime <span class="keyword">import</span> ORTOptimizer</span><br><span class="line"><span class="keyword">from</span> optimum.onnxruntime.configuration <span class="keyword">import</span> OptimizationConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ORTOptimizer并定义优化配置</span></span><br><span class="line">optimizer = ORTOptimizer.from_pretrained(onnx_model_dir)</span><br><span class="line">optimization_config = OptimizationConfig(optimization_level=<span class="number">99</span>) <span class="comment"># 启用所有优化，例如常量折叠、常量传播、OP融合等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模型上应用优化配置</span></span><br><span class="line">optimizer.optimize(</span><br><span class="line">    save_dir=onnx_model_dir,</span><br><span class="line">    optimization_config=optimization_config,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;在&#123;&#125;目录下生成优化后的模型文件：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(onnx_model_dir, os.listdir(onnx_model_dir)))</span><br><span class="line"><span class="comment"># 输出：在./models/onnx目录下生成优化后的模型文件：[&#x27;tokenizer_config.json&#x27;, &#x27;ort_config.json&#x27;, &#x27;vocab.txt&#x27;, &#x27;model.onnx&#x27;, &#x27;config.json&#x27;, &#x27;model_optimized.onnx&#x27;, &#x27;special_tokens_map.json&#x27;, &#x27;tokenizer.json&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="优化模型推理-测试优化模型推理的正确性"><a href="#优化模型推理-测试优化模型推理的正确性" class="headerlink" title="优化模型推理 + 测试优化模型推理的正确性"></a>优化模型推理 + 测试优化模型推理的正确性</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> optimum.onnxruntime <span class="keyword">import</span> ORTModelForFeatureExtraction</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer</span><br><span class="line"></span><br><span class="line">model_optimized = ORTModelForFeatureExtraction.from_pretrained(onnx_model_dir, file_name=<span class="string">&quot;model_optimized.onnx&quot;</span>, use_io_binding=<span class="literal">True</span>) <span class="comment"># 设置use_io_binding=True</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(onnx_model_dir)</span><br><span class="line"></span><br><span class="line">optimized_emb = SentenceEmbeddingPipeline(model=model_optimized, tokenizer=tokenizer, device=<span class="number">1</span>) <span class="comment"># 指定GPU编号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用优化后的模型进行推理</span></span><br><span class="line">pred = optimized_emb(<span class="string">&#x27;今天是周五啦，明天就是周末啦，开心，开心，开心&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pred[<span class="number">0</span>][:<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 输出：tensor([ 0.3507,  0.3588,  1.1540, -0.4012, -0.4290])</span></span><br></pre></td></tr></table></figure><p>查看是否与原模型结果一致（结论：一致）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sentence_transformers <span class="keyword">import</span> SentenceTransformer</span><br><span class="line"></span><br><span class="line">ori_emb = SentenceTransformer(<span class="string">&#x27;./models/m3e-base&#x27;</span>, device=<span class="string">&#x27;cuda&#x27;</span>) <span class="comment"># 加载原模型</span></span><br><span class="line"></span><br><span class="line">pred = ori_emb.encode(<span class="string">&#x27;今天是周五啦，明天就是周末啦，开心，开心，开心&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pred[:<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 输出：[ 0.35070744  0.35883522  1.1540244  -0.4012457  -0.42901722]</span></span><br></pre></td></tr></table></figure><h1 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h1><p>现在，我们来对比一下在加速前后模型的性能（推理速度）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">text_lst = [<span class="string">&#x27;今天是周五啦，明天就是周末啦，开心，开心，开心&#x27;</span>] * <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试单条推理时效</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> tqdm(text_lst):</span><br><span class="line">    optimized_emb(text)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;单条onnxruntime: &#123;&#125;s&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>((end - start) / <span class="built_in">len</span>(text_lst), <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> tqdm(text_lst):</span><br><span class="line">    ori_emb.encode(text)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;单条sentence transformer: &#123;&#125;s&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>((end - start) / <span class="built_in">len</span>(text_lst), <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试批量推理时效</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text_lst), batch_size)):</span><br><span class="line">    optimized_emb(text_lst[i:i + batch_size])</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;(batch)onnxruntime: &#123;&#125;s&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>((end - start) / <span class="built_in">len</span>(text_lst), <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text_lst), batch_size)):</span><br><span class="line">    ori_emb.encode(text_lst[i:i + batch_size])</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;(batch)sentence transformer: &#123;&#125;s&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>((end - start) / <span class="built_in">len</span>(text_lst), <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 单条onnxruntime: 0.00444s</span></span><br><span class="line"><span class="comment"># 单条sentence transformer: 0.0221s</span></span><br><span class="line"><span class="comment"># (batch)onnxruntime: 0.00449s</span></span><br><span class="line"><span class="comment"># (batch)sentence transformer: 0.00101s</span></span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>单条推理时，ONNX runtime相较于Sentence Transformer速度提升5倍<br>bacth推理时，ONNX runtime没有Sentence Transformer速度快；<strong>为啥呀？</strong><br>ONNX runtime的单条和batch速度基本一致</p><blockquote><p>参考资料：<br>[1] <a href="https://www.philschmid.de/optimize-sentence-transformers">Accelerate Sentence Transformers with Hugging Face Optimum</a><br>[2] <a href="https://www.philschmid.de/optimizing-transformers-with-optimum-gpu">Optimizing Transformers for GPUs with Optimum</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 模型加速 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ONNX runtime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>copilot使用初体验（写代码效率直接翻倍！）</title>
      <link href="/2023/07/21/copilot-experience/"/>
      <url>/2023/07/21/copilot-experience/</url>
      
        <content type="html"><![CDATA[<p>上个月，在同事的强烈安利下，终于用上了这款程序员coding利器，不得不说，用过的人都说好！！！</p><p>要是你还不知道什么是copilot，请自行百度；简单来说，它就是一款能帮你写代码的工具，能够极大提高你的工作效率，至少帮你省掉一半的编码时间！</p><p>起初，我还担心过于依赖这种智能代码补全工具，会逐渐的降低我的编码能力，那可就太不好了。经过一个多月的使用下来，我发现我的这种想法实在是太native了。</p><p>从安装好copilot到现在为止，我都没有可以去网上搜集任何关于使用它的技巧或教程，可见，这个工具对新手来说，上手也是非常容易的，完全没有任何学习成本。当然，肯定还有更多功能等待我去发现。</p><p>copilot的安装非常简单，嗯……（某宝，不到30块钱，安装教程很详细）</p><p>我是在Vscode上安装的copilot插件。在编码的过程中，copilot会根据你之前所写的内容自动联想你接下来可能要写的内容，大部分情况下，它都能猜对你想写的内容，除非你想写的内容逻辑太过复杂。若是它猜对了，你只需要按下<code>tab</code>键，就能一键补全。像下面这样</p><p><img src="/2023/07/21/copilot-experience/copilot.jpg" alt="copilot使用案例"></p><blockquote><p>那过度依赖copilot会不会真的降低我们的编码能力，或者取代我们？？？</p></blockquote><p>在我看来是不会的，虽然它能根据所给的提示联想出我们可能需要的代码片段，但它本身并不具有<strong>创造性</strong>；而一个程序员真正的实力是体现在他的<strong>创造性</strong>，或<strong>思考、梳理和解决问题的能力</strong>上。而实际工作中，大部分项目的逻辑都十分复杂，涉及非常多的细节，各个模块的代码也都逻辑错综复杂，而copilot是无法像人类一样去思考的。</p><p>总的来说，它给我带来的效率提升主要体现在： </p><ol><li>减少重复代码的编写</li><li>写正则不用再去查百度</li><li>像个老师一样，还能教给我一些我不知道的API、功能函数等；</li><li>代码写的比我漂亮，简洁</li></ol><p>若非要说他的负面影响有哪些，那可能就是会降低你码字的速度吧</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python多进程模板</title>
      <link href="/2023/07/12/python-multiprocessing/"/>
      <url>/2023/07/12/python-multiprocessing/</url>
      
        <content type="html"><![CDATA[<p>在工作中，我们经常会用到多进程来处理数据，从而提高工作效率。下文是一个多进程模板，可以按照具体需求进行修改，欢迎使用~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;进程<span class="subst">&#123;os.getpid()&#125;</span>开始处理数据<span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 这里写你的数据处理代码</span></span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;进程<span class="subst">&#123;os.getpid()&#125;</span>结束处理数据<span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_data</span>(<span class="params">data_list, cpu_worker_num</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 将数据列表分成cpu_worker_num份，例如cpu_worker_num=3，data_list=[1,2,3,4,5,6,7,8,9,10]，返回[[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    chunk_size = <span class="built_in">int</span>(<span class="built_in">len</span>(data_list)/cpu_worker_num) + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">return</span> [data_list[x:x + chunk_size] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data_list), chunk_size)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 进程数</span></span><br><span class="line">    cpu_worker_num = <span class="number">8</span></span><br><span class="line">    <span class="comment"># 待处理的数据列表</span></span><br><span class="line">    <span class="comment"># 例如，要处理多个文件，该列表可以是文件路径列表，即让每个进程分别处理一部分文件；也可以是任何你要传给单个进程的参数列表</span></span><br><span class="line">    data_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    <span class="comment"># 创建进程池</span></span><br><span class="line">    pool = Pool(cpu_worker_num)</span><br><span class="line">    <span class="comment"># 将数据列表分成cpu_worker_num份，分别传给cpu_worker_num个进程处理</span></span><br><span class="line">    <span class="comment"># 每个进程都会调用func函数，参数是data_list的其中一份</span></span><br><span class="line">    pool_data_list = split_data(data_list, cpu_worker_num)</span><br><span class="line">    <span class="comment"># 进程池中的每个进程都会调用func函数，参数是pool_data_list的其中一份</span></span><br><span class="line">    pool.<span class="built_in">map</span>(func, pool_data_list)</span><br><span class="line">    <span class="comment"># 关闭进程池</span></span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="comment"># 等待进程池中的所有进程结束</span></span><br><span class="line">    pool.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis教程（python）</title>
      <link href="/2023/07/11/redis-tutorial/"/>
      <url>/2023/07/11/redis-tutorial/</url>
      
        <content type="html"><![CDATA[<p>Redis 是一款开源的、高性能的键值对存储数据库。数据保存在内存里，所以读写速度非常快；支持的键值对数据类型包括：字符串、哈希、列表、集合、有序集合。</p><p>下文将列举部分在使用redis过程中的常用方法</p><h1 id="读取整个redis数据库"><a href="#读取整个redis数据库" class="headerlink" title="读取整个redis数据库"></a>读取整个redis数据库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_db_redis</span>():</span><br><span class="line">    rds = redis.Redis(host=<span class="string">&#x27;XXXX&#x27;</span>, port=<span class="number">123456</span>, db=<span class="number">1</span>, password=<span class="string">&#x27;XXXX&#x27;</span>)</span><br><span class="line">    pipe = rds.pipeline()</span><br><span class="line">    tag_db = &#123;&#125;</span><br><span class="line">    cursor = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cursor, keys = rds.scan(cursor, count=<span class="number">10000</span>)</span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> keys:</span><br><span class="line">            pipe.get(tag)</span><br><span class="line">        result = pipe.execute()</span><br><span class="line">        <span class="keyword">for</span> tag, tag_id <span class="keyword">in</span> <span class="built_in">zip</span>(*(keys, result)):</span><br><span class="line">            tag, tag_id = tag.decode(<span class="string">&#x27;utf-8&#x27;</span>), tag_id.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            tag_db[tag] = tag_id</span><br><span class="line">        <span class="keyword">if</span> cursor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> tag_db</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="清空整个redis库"><a href="#清空整个redis库" class="headerlink" title="清空整个redis库"></a>清空整个redis库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">rds = redis.Redis(host=<span class="string">&#x27;XXXX&#x27;</span>, port=<span class="number">123456</span>, db=<span class="number">1</span>, password=<span class="string">&#x27;XXXX&#x27;</span>)</span><br><span class="line">rds.flushdb() <span class="comment"># 比一个一个delete快多了</span></span><br></pre></td></tr></table></figure><h1 id="redis对5种数据类型的读写操作"><a href="#redis对5种数据类型的读写操作" class="headerlink" title="redis对5种数据类型的读写操作"></a>redis对5种数据类型的读写操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis <span class="comment"># 导入redis</span></span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;XXXX&#x27;</span>, port=<span class="number">123456</span>, db=<span class="number">1</span>, password=<span class="string">&#x27;XXXX&#x27;</span>) <span class="comment"># 连接redis</span></span><br></pre></td></tr></table></figure><h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Orange&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：b&#x27;Orange&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="哈希（Hash）"><a href="#哈希（Hash）" class="headerlink" title="哈希（Hash）"></a>哈希（Hash）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">r.hset(<span class="string">&#x27;user:1&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">r.hset(<span class="string">&#x27;user:1&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="built_in">print</span>(r.hgetall(<span class="string">&#x27;user1&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：&#123;b&#x27;name&#x27;: b&#x27;Tom&#x27;, b&#x27;age&#x27;: b&#x27;18&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">r.lpush(<span class="string">&#x27;mylist&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r.lpush(<span class="string">&#x27;mylist&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">r.lpush(<span class="string">&#x27;mylist&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="built_in">print</span>(r.lrange(<span class="string">&#x27;mylist&#x27;</span>, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[b&#x27;c&#x27;, b&#x27;b&#x27;, a&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">r.sadd(<span class="string">&#x27;myset&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r.sadd(<span class="string">&#x27;myset&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">r.sadd(<span class="string">&#x27;myset&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&#x27;myset&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：&#123;b&#x27;a&#x27;, b&#x27;b&#x27;, b&#x27;c&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>可以借助集合进行去重，求交集、并集、差集等操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r.sadd(<span class="string">&#x27;set1&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">r.sadd(<span class="string">&#x27;set2&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求交集</span></span><br><span class="line"><span class="built_in">print</span>(r.sinter(<span class="string">&#x27;set1&#x27;</span>, <span class="string">&#x27;set2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求并集</span></span><br><span class="line"><span class="built_in">print</span>(r.sunion(<span class="string">&#x27;set1&#x27;</span>, <span class="string">&#x27;set2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求差集</span></span><br><span class="line"><span class="built_in">print</span>(r.sdiff(<span class="string">&#x27;set1&#x27;</span>, <span class="string">&#x27;set2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;b&#x27;3&#x27;, b&#x27;4&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &#123;b&#x27;1&#x27;, b&#x27;2&#x27;, b&#x27;3&#x27;, b&#x27;4&#x27;, b&#x27;5&#x27;, b&#x27;6&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &#123;b&#x27;1&#x27;, b&#x27;2&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="有序集合（Sorted-Set）"><a href="#有序集合（Sorted-Set）" class="headerlink" title="有序集合（Sorted Set）"></a>有序集合（Sorted Set）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置有序集合</span></span><br><span class="line">r.zadd(<span class="string">&#x27;myzset&#x27;</span>, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取有序集合</span></span><br><span class="line"><span class="built_in">print</span>(r.zrange(<span class="string">&#x27;myzset&#x27;</span>, <span class="number">0</span>, -<span class="number">1</span>, withscores=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[(b&#x27;a&#x27;, 1.0), (b&#x27;b&#x27;, 2.0), (b&#x27;c&#x27;, 3.0)]</span></span><br></pre></td></tr></table></figure><p>有序集合可以用来实现排行榜等功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r.zadd(<span class="string">&#x27;rank&#x27;</span>, &#123;<span class="string">&#x27;Tom&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;Jerry&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;Alice&#x27;</span>: <span class="number">300</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取排行榜前三名</span></span><br><span class="line"><span class="built_in">print</span>(r.zrevrange(<span class="string">&#x27;rank&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>, withscores=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[(b&#x27;Alice&#x27;, 300.0), (b&#x27;Jerry&#x27;, 200.0), (b&#x27;Tom&#x27;, 100.0)]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日志模板（即取即用）</title>
      <link href="/2023/07/10/python-log-template/"/>
      <url>/2023/07/10/python-log-template/</url>
      
        <content type="html"><![CDATA[<p>本文提供了一个简单的python日志模板，及其简单，欢迎使用！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> getLogger, INFO</span><br><span class="line"><span class="keyword">from</span> concurrent_log_handler <span class="keyword">import</span> ConcurrentRotatingFileHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_rotate_logger</span>(<span class="params">file_path, level=logging.INFO</span>):</span><br><span class="line">    log_fmt = <span class="string">&#x27;%(asctime)s \&quot;%(filename)s\&quot; %(process)d %(lineno)s %(levelname)s %(funcName)s: %(message)s &#x27;</span></span><br><span class="line">    formatter = logging.Formatter(log_fmt)</span><br><span class="line">    log = getLogger()</span><br><span class="line">    logfile = os.path.abspath(file_path)</span><br><span class="line">    rotateHandler = ConcurrentRotatingFileHandler(logfile, <span class="string">&quot;a&quot;</span>, <span class="number">512</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="number">999</span>)</span><br><span class="line">    rotateHandler.setFormatter(formatter)</span><br><span class="line">    log.addHandler(rotateHandler)</span><br><span class="line">    log.setLevel(level)</span><br><span class="line">    log.info(<span class="string">&#x27;Fancy concurrent logger started!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> log</span><br><span class="line"></span><br><span class="line">LOG_FILE_PATH = <span class="string">&#x27;path_to_save_log.log&#x27;</span></span><br><span class="line">log = setup_rotate_logger(LOG_FILE_PATH)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用教程，提高你的工作效率</title>
      <link href="/2023/07/10/vim-tips/"/>
      <url>/2023/07/10/vim-tips/</url>
      
        <content type="html"><![CDATA[<p>我在入职第一年内，写代码没有使用其他IDE，所有编程工作都是使用vim完成。我将结合一年多的vim使用经验，总结一套最实用的vim使用技巧。</p><h1 id="下载最佳搭档-Termius"><a href="#下载最佳搭档-Termius" class="headerlink" title="下载最佳搭档 Termius"></a>下载最佳搭档 <a href="https://www.termius.com/">Termius</a></h1><p>Termius是ssh客户端，免费好用，界面美观</p><blockquote><p>使用技巧：窗口切换快捷键：Alt + 左右键（掌握这一个就行）</p></blockquote><h1 id="环境配置-vimrc"><a href="#环境配置-vimrc" class="headerlink" title="环境配置 .vimrc"></a>环境配置 .vimrc</h1><p>创建自己的个人Linux账户后，在用户目录（~）下创建.vimrc文件，写入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">syntax enable</span><br><span class="line">set number</span><br><span class="line">set tabstop=4</span><br><span class="line">set expandtab</span><br><span class="line">set paste</span><br></pre></td></tr></table></figure><blockquote><p>.vimrc文件主要用于配置vim，例如语法高亮、显示行号、自动缩进等；功能很多，但我觉得以上简单配置就够用了</p></blockquote><h1 id="熟记vim快捷键"><a href="#熟记vim快捷键" class="headerlink" title="熟记vim快捷键"></a>熟记vim快捷键</h1><p>掌握vim快捷键能够极大的提高工作效率，非常重要</p><p>vim命令模式分为三类：编辑模式、命令模式、底线命令模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">编辑模式：</span><br><span class="line"></span><br><span class="line">- 命令模式下按 i 进入编辑模式，开始编辑文本</span><br><span class="line"></span><br><span class="line">命令模式：</span><br><span class="line"></span><br><span class="line">- [ + ]：跳到文件顶部</span><br><span class="line">- ] + [：跳到文件底部</span><br><span class="line">- Ctrl + f ：向下翻页</span><br><span class="line">- Ctrl + b：向上翻页</span><br><span class="line">- 小写o：在下方插入一行</span><br><span class="line">- 大写O：在上方插入一行</span><br><span class="line">- g + f：跳转到路径所指向的文件（在log中查bug好用）</span><br><span class="line">- Shift + #：向上查找；此时按 n，则为向下查找</span><br><span class="line">- Ctrl + o：返回到跳转前的位置（可以一直往前跳哦，还可以在不同文件之间跳哦）</span><br><span class="line">- Ctrl + i ： 与Ctrl + o 作用相反</span><br><span class="line">- Ctrl + v：可视块模式，搭配Shift + i 可以实现代码块的左右移动，注释等功能</span><br><span class="line">- u：撤销操作（一不小心输了奇奇怪怪的字符或删除了代码的时候可用）</span><br><span class="line">- x：删除当前字符</span><br><span class="line">- 大写 I：行首插入（不包括空格）</span><br><span class="line">- 大写A：行尾插入</span><br><span class="line"></span><br><span class="line">底线命令模式：</span><br><span class="line"></span><br><span class="line">- 命令模式下按 ：进入底线命令模式</span><br><span class="line">- e /home/beauty.txt：跳转到/home/beauty.txt文件中</span><br><span class="line">- /beautiful：查找beautiful</span><br><span class="line">- /beautiful\|handsome：同时查找beautiful和handsome</span><br><span class="line">- set nu：设置行号，set nu!：取消行号</span><br><span class="line">- set list：查看文本格式</span><br><span class="line">- set paste：复制大段代码不错位</span><br></pre></td></tr></table></figure><h1 id="vim跨文件复制粘贴"><a href="#vim跨文件复制粘贴" class="headerlink" title="vim跨文件复制粘贴"></a>vim跨文件复制粘贴</h1><p><strong>step 1</strong>: vim打开A文件<br><strong>step 2</strong>: 命令模式，输入：”:sp”或者”:vsp”切分出另一个窗口<br><strong>step 3</strong>: 命令模式，输入：”:e B”，在一个窗口中打开B文件<br><strong>step 4</strong>: 按ctrl+w，按w，切换到A文件窗口命令模式，光标移到需复制起始行，输入复制的行数量，输入yy，进行复制<br><strong>step 5</strong>: 按ctrl+w，按w，切换到B文件窗口；命令模式，光标移到需粘贴行，输入p，完成粘贴</p><h1 id="字符串全局替换"><a href="#字符串全局替换" class="headerlink" title="字符串全局替换"></a>字符串全局替换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/a/b/g # 用b替换a</span><br></pre></td></tr></table></figure><h1 id="搜索同时包含两个字符串的所有“行”"><a href="#搜索同时包含两个字符串的所有“行”" class="headerlink" title="搜索同时包含两个字符串的所有“行”"></a>搜索同时包含两个字符串的所有“行”</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set magic</span><br><span class="line">/foo.*bar # 搜索含有foo和bar所在的行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用python代码整理</title>
      <link href="/2023/07/07/commonly-used-python-code/"/>
      <url>/2023/07/07/commonly-used-python-code/</url>
      
        <content type="html"><![CDATA[<p>以下代码都是在工作中经常遇到，然而死记硬背下来是不可能的，每次都现查也太麻烦了；因此在这里进行整理，以便以后无数次的使用（长期更新）</p><h2 id="获取当前可读时间"><a href="#获取当前可读时间" class="headerlink" title="获取当前可读时间"></a>获取当前可读时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d_%H-%M-%S&quot;</span>,time.localtime())</span><br></pre></td></tr></table></figure><h2 id="在输出的excel中插入超链接"><a href="#在输出的excel中插入超链接" class="headerlink" title="在输出的excel中插入超链接"></a>在输出的excel中插入超链接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=HYPERLINK(<span class="string">&quot;https://3g.k.sohu.com/t/n685055087&quot;</span>,<span class="string">&quot;显示&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="读写json文件"><a href="#读写json文件" class="headerlink" title="读写json文件"></a>读写json文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">json.dump(resdict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>) <span class="comment"># resdict需要是一个字典</span></span><br><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;file.json&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">resdict = json.load(f)</span><br></pre></td></tr></table></figure><h2 id="使用pandas读写excel的多个sheet"><a href="#使用pandas读写excel的多个sheet" class="headerlink" title="使用pandas读写excel的多个sheet"></a>使用pandas读写excel的多个sheet</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 写入多个sheet</span></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;/path/to/XXX.xlsx&#x27;</span>)</span><br><span class="line">df1.to_excel(writer, <span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line">df2.to_excel(writer, <span class="string">&quot;sheet2&quot;</span>)</span><br><span class="line">df3.to_excel(writer, <span class="string">&quot;sheet3&quot;</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读某个sheet</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;../path/to/XXX.xlsx&quot;</span>, sheet_name=<span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写sheet的两种格式</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">dic = &#123;<span class="string">&quot;key1&quot;</span>: list1, <span class="string">&quot;key2&quot;</span>: list2&#125;</span><br><span class="line">DataFrame(dic).to_excel(<span class="string">&quot;a.xlsx&quot;</span>)</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">lst = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]]</span><br><span class="line">DataFrame(lst, columns=[<span class="string">&quot;数字&quot;</span>, <span class="string">&quot;字母&quot;</span>]).to_excel(<span class="string">&quot;a.xlsx&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取文件相对路径"><a href="#获取文件相对路径" class="headerlink" title="获取文件相对路径"></a>获取文件相对路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">getModulePath = <span class="keyword">lambda</span> p: os.path.join(os.path.dirname(__file__), p)</span><br></pre></td></tr></table></figure><h2 id="python操作MySQL数据库"><a href="#python操作MySQL数据库" class="headerlink" title="python操作MySQL数据库"></a>python操作MySQL数据库</h2><p>参考资料：<a href="https://blog.csdn.net/aijaijgnaw/article/details/124729427">点我</a></p><h3 id="一个不用写SQL语句，只需要填参数的工具类"><a href="#一个不用写SQL语句，只需要填参数的工具类" class="headerlink" title="一个不用写SQL语句，只需要填参数的工具类"></a>一个不用写SQL语句，只需要填参数的工具类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span>():</span><br><span class="line">    <span class="comment"># **config是指连接数据库时需要的参数,这样只要参数传入正确，连哪个数据库都可以</span></span><br><span class="line">    <span class="comment"># 初始化时就连接数据库</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **config</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 连接数据库的参数我不希望别人可以动，所以设置私有</span></span><br><span class="line">            self.__conn = pymysql.connect(**config)</span><br><span class="line">            self.__cursor = self.__conn.cursor()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据库连接失败：\n&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询一条数据</span></span><br><span class="line">    <span class="comment"># 参数：表名table_name,条件factor_str,要查询的字段field 默认是查询所有字段*</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_one</span>(<span class="params">self, table_name, factor_str=<span class="string">&#x27;&#x27;</span>, field=<span class="string">&quot;*&quot;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> factor_str == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            sql = <span class="string">f&quot;select <span class="subst">&#123;field&#125;</span> from <span class="subst">&#123;table_name&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = <span class="string">f&quot;select <span class="subst">&#123;field&#125;</span> from <span class="subst">&#123;table_name&#125;</span> where <span class="subst">&#123;factor_str&#125;</span>&quot;</span></span><br><span class="line">        self.__cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> self.__cursor.fetchone()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询多条数据</span></span><br><span class="line">    <span class="comment"># 参数：要查询数据的条数num,表名table_name,条件factor_str,要查询的字段field 默认是查询所有字段*</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_many</span>(<span class="params">self, num, table_name, factor_str=<span class="string">&#x27;&#x27;</span>, field=<span class="string">&quot;*&quot;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> factor_str == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            sql = <span class="string">f&quot;select <span class="subst">&#123;field&#125;</span> from <span class="subst">&#123;table_name&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = <span class="string">f&quot;select <span class="subst">&#123;field&#125;</span> from <span class="subst">&#123;table_name&#125;</span> where <span class="subst">&#123;factor_str&#125;</span>&quot;</span></span><br><span class="line">        self.__cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> self.__cursor.fetchmany(num)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询全部数据</span></span><br><span class="line">    <span class="comment"># 参数：表名table_name,条件factor_str,要查询的字段field 默认是查询所有字段*</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_all</span>(<span class="params">self, table_name, factor_str=<span class="string">&#x27;&#x27;</span>, field=<span class="string">&quot;*&quot;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> factor_str == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            sql = <span class="string">f&quot;select <span class="subst">&#123;field&#125;</span> from <span class="subst">&#123;table_name&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = <span class="string">f&quot;select <span class="subst">&#123;field&#125;</span> from <span class="subst">&#123;table_name&#125;</span> where <span class="subst">&#123;factor_str&#125;</span>&quot;</span></span><br><span class="line">        self.__cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> self.__cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,table_name, value</span>):</span><br><span class="line">        sql = <span class="string">f&quot;insert into <span class="subst">&#123;table_name&#125;</span> values <span class="subst">&#123;value&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.__cursor.execute(sql)</span><br><span class="line">            self.__conn.commit()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;插入成功&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;插入失败\n&quot;</span>, e)</span><br><span class="line">            self.__conn.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改数据</span></span><br><span class="line">    <span class="comment"># 参数：表名，set值(可能是一个，也可能是多个，所以用字典)，条件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, table_name, val_obl,change_str</span>):</span><br><span class="line">        sql = <span class="string">f&quot;update <span class="subst">&#123;table_name&#125;</span> set&quot;</span></span><br><span class="line">        <span class="comment"># set后面应该是要修改的字段，但是可能会修改多个字段的值，所以遍历一下</span></span><br><span class="line">        <span class="comment"># key对应字段的名，val对应字段的值</span></span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> val_obl.items():</span><br><span class="line">            sql += <span class="string">f&quot; <span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;val&#125;</span>,&quot;</span></span><br><span class="line">        <span class="comment"># 遍历完的最后面会有一个逗号，所以给它切掉，然后再拼接条件</span></span><br><span class="line">        <span class="comment"># !!!空格很重要</span></span><br><span class="line">        sql = sql[:-<span class="number">1</span>]+<span class="string">&quot; where &quot;</span>+change_str</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.__cursor.execute(sql)</span><br><span class="line">            self.__conn.commit()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;修改成功&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;修改失败\n&quot;</span>, e)</span><br><span class="line">            self.__conn.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,table_name, item</span>):</span><br><span class="line">        sql = <span class="string">f&quot;delete from <span class="subst">&#123;table_name&#125;</span> where <span class="subst">&#123;item&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.__cursor.execute(sql)</span><br><span class="line">            self.__conn.commit()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;删除失败\n&quot;</span>, e)</span><br><span class="line">            self.__conn.rollback()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> mysql_normal_util <span class="keyword">import</span> Database</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置连接数据库的参数</span></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: <span class="number">3307</span>,</span><br><span class="line">    <span class="string">&quot;database&quot;</span>: <span class="string">&quot;lebo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;charset&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;passwd&quot;</span>: <span class="string">&quot;root&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化时就直接传参数</span></span><br><span class="line">db = Database(**config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询1条</span></span><br><span class="line">select_one = db.select_one(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(select_one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多条</span></span><br><span class="line">select_many = db.select_many(<span class="number">3</span>, <span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(select_many)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有数据(根据条件)</span></span><br><span class="line">select_all = db.select_all(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;id&gt;10&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(select_all)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一条数据</span></span><br><span class="line">db.insert(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;(20,&#x27;111&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment"># 新增多条数据</span></span><br><span class="line">db.insert(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;(21,&#x27;123&#x27;),(22,&#x27;456&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改一个字段的数据</span></span><br><span class="line">db.update(<span class="string">&quot;user&quot;</span>, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;222&quot;</span>&#125;, <span class="string">&quot;id=20&quot;</span>)</span><br><span class="line"><span class="comment"># 修改多个字段的数据</span></span><br><span class="line">db.update(<span class="string">&quot;user&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;23&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;12345&quot;</span>&#125;, <span class="string">&quot;id=103&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">db.delete(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;id=23&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="通过shell命令导出mysql数据"><a href="#通过shell命令导出mysql数据" class="headerlink" title="通过shell命令导出mysql数据"></a>通过shell命令导出mysql数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/mysql -hclientrecmtagro.db.sxhano.com -urecom_tag_ro -p4BhBsLfEMq3m -P3306 --default-character-set=utf8 -Drecom_tag -A -Ne &quot;select * from t_term_info&quot; &gt; &quot;model/sqlModel.txt”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-h后跟数据库域名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u后跟用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p后跟密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-D后跟数据库名称</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux命令整理</title>
      <link href="/2023/07/06/commonly-used-linux-command/"/>
      <url>/2023/07/06/commonly-used-linux-command/</url>
      
        <content type="html"><![CDATA[<h2 id="查看某个进程是否正在运行"><a href="#查看某个进程是否正在运行" class="headerlink" title="查看某个进程是否正在运行"></a>查看某个进程是否正在运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep 进程名</span><br></pre></td></tr></table></figure><h2 id="kill进程"><a href="#kill进程" class="headerlink" title="kill进程"></a>kill进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程号  # 根据进程号kill</span><br><span class="line">pkill -f 进程名 # 根据进程名kill</span><br><span class="line">ps -ef | grep &quot;进程名&quot; | grep -v grep | cut -c 9-15 | xargs kill -9 # 批量kill同名进程</span><br></pre></td></tr></table></figure><h2 id="查看某个进程的代码位置"><a href="#查看某个进程的代码位置" class="headerlink" title="查看某个进程的代码位置"></a>查看某个进程的代码位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwdx 进程号</span><br><span class="line">ll /proc/进程号</span><br><span class="line">ps aux | grep 进程号/进程名</span><br></pre></td></tr></table></figure><h2 id="在指定目录下新建或删除用户"><a href="#在指定目录下新建或删除用户" class="headerlink" title="在指定目录下新建或删除用户"></a>在指定目录下新建或删除用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /opt/XXX -m 用户名</span><br><span class="line">passwd 用户名 # 添加密码</span><br><span class="line">userdel chencheng</span><br></pre></td></tr></table></figure><h2 id="批量安装和导出python依赖"><a href="#批量安装和导出python依赖" class="headerlink" title="批量安装和导出python依赖"></a>批量安装和导出python依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirement.txt # 导出依赖</span><br><span class="line">pip install -r requirement.txt # 安装依赖</span><br><span class="line">while read requirement; do pip install $requirement -i  https://pypi.tuna.tsinghua.edu.cn/simple; done &lt; requirements.txt # 安装依赖，跳过失败项</span><br></pre></td></tr></table></figure><h2 id="如何使用别人的python环境"><a href="#如何使用别人的python环境" class="headerlink" title="如何使用别人的python环境"></a>如何使用别人的python环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一：<span class="built_in">export</span>环境</span></span><br><span class="line">export PATH=/data/chencheng/anaconda3/envs/para_env/bin:$PATH</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二：使用别人环境下的python运行自己的代码</span></span><br><span class="line">nohup /data/chencheng/anaconda3/envs/para_env/bin/python csp_para.py &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="打包和解压缩"><a href="#打包和解压缩" class="headerlink" title="打包和解压缩"></a>打包和解压缩</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar打包 文件1和文件2 成XXX.tar.gz</span></span><br><span class="line">tar -zcvf XXX.tar.gz 文件1 文件2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar解压缩</span></span><br><span class="line">tar -zxvf XXX.tar.gz -C /some/directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zip压缩文件</span></span><br><span class="line">zip -r XXX.zip /XXX</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">unzip解压缩</span></span><br><span class="line">unzip XXX.zip -d /some/directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压.gz文件</span></span><br><span class="line">gzip -d XXX.gz</span><br></pre></td></tr></table></figure><h2 id="从一台机器传文件到另一台机器"><a href="#从一台机器传文件到另一台机器" class="headerlink" title="从一台机器传文件到另一台机器"></a>从一台机器传文件到另一台机器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [-P 端口号] XXX user@ip:/path/to/some/directory</span><br></pre></td></tr></table></figure><h2 id="复制时排除某目录"><a href="#复制时排除某目录" class="headerlink" title="复制时排除某目录"></a>复制时排除某目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如有目录/a/b/c /a/d/e，要复制到/f，排除b目录</span></span><br><span class="line">cp -r !(b) /f</span><br></pre></td></tr></table></figure><h2 id="查看磁盘占用、文件占用"><a href="#查看磁盘占用、文件占用" class="headerlink" title="查看磁盘占用、文件占用"></a>查看磁盘占用、文件占用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -h   # 查看磁盘占用量</span><br><span class="line">du -ah --max-depth=1 # 查看当前目录下各文件的大小</span><br></pre></td></tr></table></figure><h2 id="更改目录所属人"><a href="#更改目录所属人" class="headerlink" title="更改目录所属人"></a>更改目录所属人</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在root权限下</span></span><br><span class="line">chown -R orange:orange dirname</span><br></pre></td></tr></table></figure><h2 id="查看某用户的所有进程情况"><a href="#查看某用户的所有进程情况" class="headerlink" title="查看某用户的所有进程情况"></a>查看某用户的所有进程情况</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -u orange # 输入命令后，再按c显示各进程详细目录信息;按m将进程按占用内存从大到小显示</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用vscode调试远程代码（通过跳板机登录、终端使用）</title>
      <link href="/2023/07/05/connect-to-remote-machine-through-vscode/"/>
      <url>/2023/07/05/connect-to-remote-machine-through-vscode/</url>
      
        <content type="html"><![CDATA[<p>本教程将教会你使用vscode连接远程服务器（包括需要跳板机连接的远程服务器）进行代码调试、终端使用等。</p><p>这个方法已经被安利给组内的小伙伴了，他们都赞不绝口（不夸张），像是打开了新世界的大门！！！开发效率蹭蹭蹭！</p><h1 id="在本地安装VSCode软件"><a href="#在本地安装VSCode软件" class="headerlink" title="在本地安装VSCode软件"></a>在本地安装VSCode软件</h1><pre><code>略</code></pre><h1 id="在VSCode中连接远程服务器"><a href="#在VSCode中连接远程服务器" class="headerlink" title="在VSCode中连接远程服务器"></a>在VSCode中连接远程服务器</h1><ol><li><p>在VSCode中安装SSH插件。在插件安装处搜索“SSH”，选择下载量最高的SSH插件安装即可 </p></li><li><p>点击vscode左边栏“远程资源管理器”，配置本地~&#x2F;.ssh&#x2F;config文件<br><img src="/images/connect-to-remote-machine-through-vscode/snapshot1.png" alt="config文件截图"><br>在config文件中输入以下内容（修改机器ip、账户名称、本地私钥位置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跳板机115</span></span><br><span class="line">Host go115 # 跳板机名称</span><br><span class="line">    HostName 10.18.75.115</span><br><span class="line">    Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile C:\Users\chengchen219429\.ssh\id_rsa # 本地私钥位置</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目的机247</span></span><br><span class="line">Host go247 # 目的机名称</span><br><span class="line">    HostName 10.23.162.14</span><br><span class="line">    User root</span><br><span class="line">    ProxyCommand C:\Windows\System32\OpenSSH\ssh.exe -W %h:%p go115 # 这里注明跳板机名称</span><br></pre></td></tr></table></figure></li><li><p>将本地ssh公钥上传至跳板机和目的机，方法如下<br>找到本地.ssh文件夹（默认在用户目录下，如C:\Users\XXX.ssh），打开公钥id_rsa.pub，复制。注：如果本地没有公私钥文件，可以手动生成，在cmd中输入<code>ssh-keygen -t rsa -C &quot;your email address&quot;</code></p></li><li><p>登录跳板机和目的机，将复制的公钥拷贝至~&#x2F;.ssh&#x2F;authorized_keys文件最后一行，保存</p></li><li><p>登录远程服务器~<br><img src="/images/connect-to-remote-machine-through-vscode/snapshot2.png" alt="config文件截图"></p></li></ol><h1 id="使用远程服务器进行调试"><a href="#使用远程服务器进行调试" class="headerlink" title="使用远程服务器进行调试"></a>使用远程服务器进行调试</h1><ol><li>调试配置：点击vscode左侧“运行和调试”按钮，编写launch.json文件，在“python”字段输入python解释器路径，其他保持不变，保存文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Python: 当前文件&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;python&quot;,</span><br><span class="line">            &quot;python&quot;: &quot;/data/chencheng/anaconda3/envs/comment_env/bin/python3.8&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line">            &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">            &quot;justMyCode&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>开始调试：编写一个调试测试py文件，打上断点，即可开始愉快的debug啦</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="文件传输功能"><a href="#文件传输功能" class="headerlink" title="文件传输功能"></a>文件传输功能</h2><p>使用vscode连接服务器后可以直接上传下载文件，非常方便</p><h2 id="设置vscode终端每次打开都以最大化显示"><a href="#设置vscode终端每次打开都以最大化显示" class="headerlink" title="设置vscode终端每次打开都以最大化显示"></a>设置vscode终端每次打开都以最大化显示</h2><p>点击“文件”-“首选项”，搜索“Panel: Opens Maximized”，设置为“always”</p><h2 id="设置vscode不显示隐藏文件（命名以’-’开头的文件或文件夹）"><a href="#设置vscode不显示隐藏文件（命名以’-’开头的文件或文件夹）" class="headerlink" title="设置vscode不显示隐藏文件（命名以’.’开头的文件或文件夹）"></a>设置vscode不显示隐藏文件（命名以’.’开头的文件或文件夹）</h2><p>按下快捷键：ctrl+shift+P，在输入框中输入settings回车，进入User Settings页面搜索files.exclude，没有的话则手动添加。false为显示，true为隐藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;files.exclude&quot;: &#123;</span><br><span class="line">        // &quot;**/.git&quot;: false,</span><br><span class="line">        // &quot;**/.svn&quot;: false,</span><br><span class="line">        // &quot;**/.hg&quot;: false,</span><br><span class="line">        // &quot;**/CVS&quot;: false,</span><br><span class="line">        // &quot;**/.DS_Store&quot;: false,</span><br><span class="line">        // &quot;**/Thumbs.db&quot;: false,</span><br><span class="line">        // &quot;**/.local&quot;:false,</span><br><span class="line">        &quot;**/.*&quot;: true</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="无法连接远程服务器的原因"><a href="#无法连接远程服务器的原因" class="headerlink" title="无法连接远程服务器的原因"></a>无法连接远程服务器的原因</h2><p>以下可能的解决方法<br>用root登录远程主机，修改vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config文件的字段，改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br><span class="line">ChallengeResponseAuthentication no</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br><span class="line">systemctl status sshd.service #查看ssh服务的状态</span><br></pre></td></tr></table></figure><h2 id="vscode设置自动保存（很重要）"><a href="#vscode设置自动保存（很重要）" class="headerlink" title="vscode设置自动保存（很重要）"></a>vscode设置自动保存（很重要）</h2><p>快捷键<code>ctrl+，</code>打开设置，搜索<code>auto save</code>，按下图设置<br><img src="/images/connect-to-remote-machine-through-vscode/snapshot3.png" alt="config文件截图"></p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/baidu_41553551/article/details/128505159">vscode使用跳板机（密钥）进入内网并连接内网中其它机器（密码）</a></li></ul><h2 id="如何解决VSCode无法连接到Python内核问题"><a href="#如何解决VSCode无法连接到Python内核问题" class="headerlink" title="如何解决VSCode无法连接到Python内核问题"></a>如何解决VSCode无法连接到Python内核问题</h2><p>参考：<a href="https://www.python100.com/html/ZQQX88O0863H.html">https://www.python100.com/html/ZQQX88O0863H.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建你的个人博客（Github+hexo+butterfly）</title>
      <link href="/2023/06/28/build-your-own-blog-website-from-scratch/"/>
      <url>/2023/06/28/build-your-own-blog-website-from-scratch/</url>
      
        <content type="html"><![CDATA[<p>激动之情无以言表，我居然自己成功搭建了属于自己的博客；从零开始，一点点查资料，耗时3天左右，整个过程跌跌绊绊，最终达到了预想的结果，实在太有成就感了！</p><p>事情是这样的，我在与一个校友接触的过程中，通过他分享的经验帖进到了他的<a href="https://youngforest.github.io/">博客网站</a>，里面有好多干货，既包含技术层面，也包含了一些生活记录；那个校友用博客来记录年终总结和制订年度计划，太赞了！没想到用博客来做记录居然是一件这么有意思的事！那我也要搭建自己的博客网页！</p><p>不废话了，这篇博客主要记录从零开始搭建个人博客网站的<strong>核心步骤</strong>。正文开始~~~</p><p><strong>技术关键词</strong></p><ul><li>Github</li><li>Hexo</li><li>butterfly</li></ul><h1 id="本地环境配置"><a href="#本地环境配置" class="headerlink" title="本地环境配置"></a>本地环境配置</h1><p>关键词： Git、Node.js、npm、Hexo  </p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>去<a href="https://git-scm.com/download/">Git官网</a>下载所需版本，一直点下一步安装。</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>去<a href="https://nodejs.org/en/download">node.js官网</a>下载符合自己系统的版本，傻瓜式安装，一直点下一步即可。node.js自带npm。命令行中输入<code>node -v</code>验证是否安装成功。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>命令行中输入<code>npm install -g hexo-cli</code>。输入<code>hexo -v</code>验证是否安装成功</p><h1 id="创建本地开发目录"><a href="#创建本地开发目录" class="headerlink" title="创建本地开发目录"></a>创建本地开发目录</h1><p>创建一个博客项目文件夹，在该路径下用<code>Git bash</code>打开；输入<code>npm i</code>安装依赖；输入<code>hexo init blog-demo(项目名)</code>生成我们的Hexo项目，生成后会出现如下文件：  </p><blockquote><p>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【_config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息</p></blockquote><p>至此，我们的博客已经搭好啦！</p><p>什么！！你在跟我开玩笑吗？？</p><p>没错，我们的博客雏形到这里已经完成了，我们可以运行本地博客项目查看我们的初版博客了；此后就是在此基础上<strong>美化博客网站</strong>、<strong>写博客</strong>、<strong>部署到互联网上</strong>。</p><p>在Git bash中继续依次输入<code>hexo clean</code> &amp; <code>hexo g</code> &amp; <code>hexo s</code>运行服务，在浏览器打开即可~</p><h1 id="美化网站"><a href="#美化网站" class="headerlink" title="美化网站"></a>美化网站</h1><p>初始的博客实在太丑，Hexo提供了大量的模板用来美化我们的网页，可以去hexo官网找一个喜欢的风格模板。本博客网站采用了butterfly模板，参考<a href="https://fe32.top/articles/hexo1600/">教程</a>，讲的非常的详细！<br>此处不做赘述，主要是刚开始写博客，肯定没人家解释的清楚~</p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>这里写博客用的是Markdown语法。在Git bash中输入<code>hexo new 我的博客名称</code>新建博客，新建的博客可以在<code>./source/_posts/</code>目录下看到，用IDE打开编辑保存即可。</p><p>重新输入<code>hexo clean</code> &amp; <code>hexo g</code> &amp; <code>hexo s</code>运行服务，可以看到博客已经出现在网页上了。</p><h1 id="部署到Github上"><a href="#部署到Github上" class="headerlink" title="部署到Github上"></a>部署到Github上</h1><p>参考<a href="https://fe32.top/articles/hexo1600/">教程</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="图片放置问题"><a href="#图片放置问题" class="headerlink" title="图片放置问题"></a>图片放置问题</h2><p>参考<a href="https://blog.csdn.net/ayuayue/article/details/109198493">资料</a> 配置<br>注意，博客的卡片图（cover）放置的位置和博文图片放置的位置不一样</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人网站搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 教程</title>
      <link href="/2023/06/28/markdown-tutorial/"/>
      <url>/2023/06/28/markdown-tutorial/</url>
      
        <content type="html"><![CDATA[<p>我发现，Markdown语法不难，但学了好几遍都记不住，原因就是学了却没有去使用它；好在我搭建了自己的博客，后面使用Markdown的机会更多了，相信之后一定会记住的！</p><p>本文不会教你Markdown的语法知识，只作为自检使用；当你能用自己的话回顾完下述知识点时，代表你已经完全掌握Markdown的基本语法啦~</p><p>若不会，请查看教程：<a href="https://blog.csdn.net/weixin_43863919/article/details/124648510">我是教程，点我</a></p><h3 id="请回答以下知识点"><a href="#请回答以下知识点" class="headerlink" title="请回答以下知识点"></a>请回答以下知识点</h3><ol><li>换行</li><li>标题分级</li><li>分割线</li><li>斜体、粗体、删除线</li><li>超链接、自动超链接</li><li>插入图片、带有链接的图片</li><li>无序列表、有序列表、列表嵌套</li><li>文字引用</li><li>行内代码块、代码块</li><li>表格、数学公式</li><li>待办事项、脚注、HTML</li></ol><p>相关资料：<br>    - <a href="https://tableconvert.com/markdown-to-markdown">用Markdown快速制作表格</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年6月18日 - 香港旅行游记</title>
      <link href="/2023/06/28/HongKong-trip/"/>
      <url>/2023/06/28/HongKong-trip/</url>
      
        <content type="html"><![CDATA[<p>今年6月中旬，很早规划的香港之行终于开启了。这次旅行，我们在香港只有三天的时间，因为不想赶在节假日去，人太多，啥都贵。在出发前，我们在网上搜集了很多资料，很多人都说香港人看不起内地人，态度恶劣之类的，所以原本的期待变成了忐忑。</p><p>我们想去看看资本主义到底长啥样，香港真像网上言论般那样动乱吗？</p><p>只能说，真要少在网上冲浪，尤其是看那些带个人主观色彩的言论，虚假的信息泛滥，我们的认知很容易受到这些的影响，网上那些信息很明显是有人刻意为之，故意放大，唯恐天下不乱。</p><p>去了之后才发现，哪里都有好人，也都有坏人，我们对一座城市的印象，对在那里生活的人的看法，不应该被网上的只言片语带风向，对他们产生误解，这对他们是不公平的。</p><p>我们刚落地香港，由于不熟悉繁体字，找不到出口，遇到了非常热心的机场值勤人员；出了机场又有一个小帅哥主动帮我们指路；在公交车上看到了为一个没有零钱的乘客主动支付车费的热心肠举动</p><p>当然</p><p>也看到了在这座极度<strong>繁忙拥挤</strong>的城市下努力求生存的人类，看到了他们的些许冷淡、没有耐心和脾气暴躁，但这都只是少数，是再正常不过的现象了</p><p>当我们去到一个陌生的地方，我们的感官会被放大，我们对事物的误解也会被放大，所以，一定要保持理智，多换位思考。</p><p>这段旅行下来，香港给我的印象是<strong>拥挤、生活节奏快、高消费高工资、多元化</strong>，香港有很多外国人在那里从事各种各样的职业，有机场值勤、建筑工人、外卖小哥，还有非常多的菲佣，这点倒是第一次见。</p><p><img src="/2023/06/28/HongKong-trip/me-in-hongkong.jpg" alt="我的照片"><br><img src="/2023/06/28/HongKong-trip/hongkong-street-scene.jpg" alt="香港街景"></p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 香港 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
